{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Flask support for BrowserID authentication, using Flask-Login","body":"# Flask-BrowserID\r\n\r\nA Flask extension that provides integration with Mozilla's [BrowserID]() authentication system and Flask-Login. It exposes two routes, for login and logout, and a javascript authentication bundle that allows you to quickly create login and logout buttons.\r\n\r\n# Installation\r\n\r\nInstall with **pip**:\r\n\r\n    pip install git+https://github.com/garbados/flask-browserid.git\r\n\r\n# Quickstart\r\n\r\nFlask-BrowserID requires that Flask-Login's LoginManager be configured and registered with the app first, like so:\r\n\r\n    from flask import Flask\r\n    from flask.ext.login import LoginManager\r\n    from flask.ext.login import BrowserID\r\n    from my_stuff import get_user_by_id # finds a user by their id\r\n    from other_stuff import get_user # finds a user based on BrowserID response\r\n\r\n    app = Flask(__name__)\r\n    \r\n    login_manager = LoginManager()\r\n    login_manager.user_loader(get_user_by_id)\r\n    login_manager.init_app(app)\r\n\r\n    browser_id = BrowserID()\r\n    browser_id.user_loader(get_user)\r\n    browser_id.init_app(app)\r\n\r\nNow the routes `/api/login` and `/api/logout` have been registered with your app. A javascript bundle, `auth_script`, has also been added to the top level of your request context, so you can access it in templates like so:\r\n\r\n[Note: `auth_script` requires JQuery and Mozilla's `include.js`]\r\n\r\n    <html>\r\n        <head>\r\n            <script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\r\n            <script src=\"https://browserid.org/include.js\" type=\"text/javascript\"></script>\r\n            <script type=\"text/javascript\">{{ auth_script|safe }}</script>\r\n        </head>\r\n        <body>\r\n            <button id=\"browserid-login\">Login</button>\r\n            <button id=\"browserid-logout\">Logout</button>\r\n        </body>\r\n    </html>\r\n\r\nThanks to `auth_script`, clicking the `Login` button on that page will attempt to log you in using BrowserID. If you're already logged in, then clicking `Logout` will log you out.\r\n\r\n# Required Configuration\r\n\r\nFlask-BrowserID requires a function that takes the data returned by BrowserID and uses it to find and return a user, which Flask-BrowserID then logs in using Flask-Login. If the function can't find a user, it can attempt to create a user using the data given. If a user could neither be found nor created, the function should return None. The data returned by BrowserID will look something like this if successful:\r\n\r\n    {\r\n        \"status\": \"okay\",\r\n        \"email\": \"lloyd@example.com\",\r\n        \"audience\": \"https://mysite.com\",\r\n        \"expires\": 1308859352261,\r\n        \"issuer\": \"browserid.org\"\r\n    }\r\n\r\nOr this, if not:\r\n\r\n    {\r\n        \"status\": \"failure\",\r\n        \"reason\": \"no certificate provided\"\r\n    }\r\n\r\nBrowserID's response will have already been parsed from JSON into a dict by the time it reaches your `user_loader` function.\r\n\r\n# Optional Configuration\r\n\r\nYou can set the URLs Flask-BrowserID uses for login and logout by setting the following in your application's configuration:\r\n\r\n* `BROWSERID_LOGIN_URL`: defaults to `/api/login`\r\n* `BROWSERID_LOGOUT_URL`: defaults to `/api/logout`\r\n\r\nSee [Flask Configuration Handling](http://flask.pocoo.org/docs/config/) for more on how to configure your application.\r\n\r\n# Credits\r\n\r\nMany thanks to [Flask-Mongoengine](), who I based the structure of this extension on, and to [Flask-Login](), for generally being a pretty sweet extension.\r\n","name":"Flask-BrowserID"}